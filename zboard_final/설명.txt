
	 1. 컨트롤러
		- @Controller
			- ModelAndView 리턴: Model + View <-> form submit
			- ResponseEntity 리턴: Model + 상태코드 <-> $.ajax()
		- @RestController
			- ModelAndView 리턴 못 함

	 2. 입력값을 꺼내는 어노테이션
		2-1) ?name=spring&age=20 이런 방식
		- @RequestParam: 요청 데이터에서 값을 하나 꺼낸다
		- @ModelAttribute: 요청을 객체(command 객체, dto)에 담는다
									cf) 요청을 객체에 담는 것을 커멘트 패턴이라고 함. 커멘드 객체는 디자인패턴 이름임

		2-2) /board/{pageno} -> /board/0 이런 방식
		- @PathVariable: 요청이 주소에 담김.

	 3. 입력값을 꺼내면서 검증하는 어노테이션
		- @Validated: 검증을 켠다
		- @Valid: 커멘드 객체를 검증. 바로 뒤에 BindingResult가 와야 한다

	 4. 예외처리
		cf) 오류
		 - Exception: 프로그래머가 대처할 수 있는 가벼운 오류
		 - Error: 심각한 오류	 
	 
	 	4-1. 자바 예외처리 (개발자의 처리를 권장)
		 1) try{ 예외가 발생할 수 있는 코드 } catch { 예외를 처리하는 코드 }
		 2) throws 예외객체: 예외를 처리하지 않겠다
		 => 자바로 예외처리 할거면 가급적 try~catch 를 사용하자

		4-2. 스프링 예외처리
		 @ExceptionHandler라는 예외전담 컨트롤러가 있다.
		 => 그래서 스프링을 사용할 때는 예외는 가급적 throws 해야 한다.

	5. 필터
	 Filter: 컨트롤러 앞에서 실행되는 클래스
	 스프링 시큐리티는 인증작업을 잘게 쪼개서 10여개의 필터로 작업을 수행
	 필터들이 줄을 서있다 = 필터체인이라고 함 => SecurityFilterChain

	6. 스프링 빈 생성 어노테이션
	 - @Bean
	 - @Component <- @Controller, @Service, @Repository
	 - @Configuration: 스프링 설정 빈
	 - @Mapper: 스프링 어노테이션이 아니라 마이바티스 어노테이션 (마이바티스가 인터페이스를 스프링에 dao로 등록한다)
	 
	 7. 스프링 시큐리티
	 	- 인증: 로그인 @PreAuthrize  + isAnonymous(), isAuthenticated()
	 	- 인가: 권한 	 @Secured("ROLE_권한이름")
	 	- CSRF: jsp파일의 위변조를 잡아내겠다 -> post일 때만 잡아냄
	 				 Get 방식으로 요청할 때 서버가 csrf 토큰을 같이 보낸다
	 				 Post방식으로 요청할 때 csrf를 서버로 재전송하면 서버가 확인한다
	 
	 8. 스프링 시큐리티 태그 라이브러리
	 	- <sec:authorize access=""> 태그를 이용해 인증과 인가
	 			<sec:authorize access="isAnonymous()">				비로그인 체크	비로그인인 사람만 보임
	 			<sec:authorize access="isAuthenticated()">			로그인 체크		로그인인 사람만 보임
	 			<sec:authorize access="hasRole('권한이름')">		권한 체크			해당 권한을 가진 사람만 보임
	 	- <sec:authentication property="name"> 으로 로그인 아이디를 가져올 수 있다
	 	
	 9. 부가 클래스들
	 	- 403 오류 처리 									  -> AccessDeniedHandler 인터페이스 구현
	 	- 로그인 실패했을 때 처리할 작업이 있다면 -> SimpleUrlAuthenticationFailureHandler 클래스 상속
	 	- 로그인 성공했을 때 처리할 작업이 있다면 -> SimpleUrlAuthenticationSuccessHandler 클래스 상속
	 
	 10. request, response 객체
	 	- haeder: 편지봉투에 해당(요청방식, 한글인코딩, 보내고 받는 url...)
	 	- body: 실제 데이터
	 
	 11. List, Map, Set ... 이런 애들의 부모 인터페이스를 Collection이라고 한다
	 	자바에서 집합을 다루는 기법들을 Collection API라고 한다
	 	Collection의 흐름(stream)처럼 다루는 방법이 Stream API라고 한다
	 	면접에서 Collection API써봤죠? 했을때 그게 뭐죠? 가 아니라 예라고만 대답할 수 있으면 됨
	 	
// Mapper	 	
	면접: DB뭐썼어요? 마이바티스요
	-> 그러면 mapper 만드는거 설명할 수 있어야하고
	-> selectKey에 대해 설명할 수 있는 수준
	
	0. 마이바티스에서 select문에는 무조건 resultType을 적어줘야한다 -> 안쓰면 에러

	 1. 페이징 쿼리
	 	- 정렬없이 정렬효과를 내려면 index힌트, index_desc 힌트를 사용한다
	 	- 힌트는 오라클에서 이렇게 쿼리를 처리하라고 안내하는 것
	 		select /*+ index(테이블이름 인덱스 이름) ~ */
	 		select /*+ index_desc(테이블이름 인덱스 이름) ~ */
	 	- CDATA (반대는 PCDATA)
	 		xml 파일에서 "이부분은 xml이 아니니까 xml 문법에 맞는지 확일할 필요 없어"라고 알려준다
	 	
	 2. SelectKey (대표적인 사용예시는 시퀀스)
	 	- dao에 시퀀스를 이용해 insert하는 쿼리
	 		insert into board values(board_seq.nextval, #{title} ... )
	 		위처럼 작성하면 생성된 시퀀스값은 dao내부에서 사용되고 사라진다
	 	- 그런데 만약 service, controller에서 시퀀스값이 필요하다면? -> selectkey
	 		service에서 public Board save(Board board) {
	 			// 현재 board의 bno는 null
	 			boardDao.save(board);
	 			// dao는 생성한 시퀀스를 board에 저장
	 			
	 			// 밖에서도 이 값에 접근가능 => 이 기술이 selectKey
	 			system.out.println(board.getBno());
	 		}
	 		
	 	ex) insert문 예시
	 		1. insert를 실행할 때 selectKey가 먼저 실행된다-> 이 명령이 order='before'
	 		2. sql이 새로운 시퀀스를 생성
	 		3. 생성된 long(resultType) 시퀀스 값을 전달된 객체의 bno에 넣어라
	 		4. 이제 Board객체에는 bno값이 저장되어있음
	 		<insert id="save">
				<selectKey keyProperty="bno" resultType="long" order="BEFORE">
					select board_seq.nextval from dual
				</selectKey>
				insert into board values(#{bno}, #{title}, #{content}, #{writer}, sysdate, 0, 0, 0)
			</insert>
	 	