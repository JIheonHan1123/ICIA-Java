1. JDBC: 자바 데이터베이스 프로그래밍 표준 -> 인터페이스
			  자바와 연동되고 싶은 DB 제조사는 JDBC표준을 구현해라

2. Driver: JDBC표준에 따라 DB와 연결하는 소프트웨어
				DB제조사가 JDBC표준을 구현한 프로그램
				지금 우리는 Oracle Driver 사용할거임 (프로젝트 폴더 만들 때 설정체크)
	
3. Connection: 데이터베이스와 연결하는 객체
					 필요할때 연결하고 사용이 끝났을때 해체할 경우 비용이 크다
					 필요할때마다 만들면 
					 
4. Connection Pool = CP
		- Connection을 "미리 여러개 만들어서" 필요하면 빌려서 사용 후 반납 -> 미리 확보해둔다는 개념
		- 대중적인 제품으로는 DBCP
		- 스프링의 기본 커넥션풀은 Hikari CP
		- ex) 강사 풀이 있다: 강사한명 빵구나도 대체할 강사가 있다.
		- 면접) 커넥션풀 써봤죠? 하면 ㅇㅇ하면 됨 -> 용어 아는지 물어보는거임
				   + 뭐썼누? 하면 Hikari CP 썼다고 하면 됨 

5. 스프링부트는 라이브러리를 자동으로 설정한다  
	- 스프링부트에서 프로젝트 만들 때 드라이버를 선택하면 스프링부트는 자동으로 Hikari 설정을 잡는다. (안쓴다가 안됨. 무조건 잡음.)
	- 드라이버이름, 서버 url, 아이디, 비밀번호

6. Connection은 사용이 끝나면 연결을 끊는다
	그런데 CP는 사용이 끝나면 연결을 끊는 것이 아니라 반납하는 객체가 필요하다
	이렇게 빌리고 반납하는 Connection객체를 DataSource라고 한다 
	- JDBC가 사용하는 연결객체: Connection
	- CP가 사용하는 연결객체: Connection이 아니라 DataSource를 사용
	
7. Connection Pool은 연결을 가지고 DataSource를 미리 생성한 다음 빌려주고 반납받으면서 운용

8. application.properties 설정
	- 드라이버 이름, 서버url, username, password
	
9. mybatis로 작업하면 실행되는 sql이 출력X -> sql을 출력하기위한 설정이 필요
	sql을 출력하는 라이브러리가 필요 -> log4jdbc-log4j2
	
10. 시스템의 상태를 출력하는 것을 logging이라고 한다
	- 디자인 패던 퍼싸드패턴(facade 패턴): 표준이 있고 구현체가 있다
	- 자바 로깅 표준: slf4j 인터페이스
	- 자바 로깅 구현체: log4j, log4j2, logback ...
		cf) log4j, log4j2, logback은 사용법이 똑같다? -? O (표준의 구현체이기 때문에)
		ex) 삼성냉장고든 LG냉장고든 중국냉장고든 성능의 차이만 있을 뿐 사용법은 똑같다
		
11. logback에 대한 설정파일: logback.xml
	- 로깅레벨: error < warn < info < debug < trace (trace로 갈수록 출력양이 많아짐)
	- 예를 들어 400오류의 경우
		레벨이 info면 아무 내용도 안나온다
		레벨을 debug로 하면 어떤 값이 들어와서 거부했다는 내용이 콘솔에 나온다
		
12. 데이터를 이름과 값으로 저장
	- 클래스
	- Map
	- Properties: 텍스트 파일인데 username=spring 이런 이름:값 형식의 텍스트파일 
		
13. component-scan: 스프링이 생성할 객체들을 찾을 패키지
	- 처리하는 객체는 스프링이 생성 -> 스프링 bean
	- 스프링이 @Component가 걸린 클래스를 검색하는데..
	- 기본값은 프로젝트 패키지(com.example.demo)의 하위 패키지
	
14. 스프링빈을 만드는 어노테이션
	- @Component <- @Controller, @Service, @Repository(dao)
	- 유명한 라이브러리를 사용하면 스프링이 그 라이브러리를 지원
		JUnit: @SpringBootTest
	- 안 유명한 라이브러리를 사용하면 스프링이 지원하지 X -> 라이브러리가 스프링을 지원한다
		myBatis가 객체를 생성해서 스프링에 등록: @Mapper
	- 면접) 스프링에서 dao만드는 어노테이션 = @Repository임. @Mapper라고 대답하면 안된다
				스프링엔 @Mapper가 없다. @Mapper는 마이바티스에서 만드는거임
	
	
15. 클래스의 이름이 겹치면
	- 스프링 빈은 싱글톤(객체가 1개만 만들어진다)
	- 그런데 보통 객체를 하나 만들때 객체 이름은 클래스 이름을 소문자로...
	   DeptDao deptDao = new DeptDao();
	- 스프링이 @Component로 객체를 생성할 때 그 객체의 이름은 첫글자만 소문자로 바꾼 클래스의 이름과 같다
	- 객체이름을 바꾸고 싶다면 @Component("바꾸고싶은이름")
	
16. 몰라도 됨
	- @Autowired는 type으로 주입
		@Autowired
		private Tire tire;
	- 위 코드를 주입할 때 Tire 객체가 둘 이상이면 오류발생
	- 2차적으로 이름으로 객체를 구입해서 주입할 수 있다: Qualifier
	  따라서 객체의 이름은 겹쳐서는 안된다

----------------------------------------------------------------------------------------------

2. 라이브러리: logback, mybatis, spring web
	- 스프링부트 마법사로 프로젝트를 생성하면 마법사가 라이브러리를 동작시킨다
	
	
3. 스프링부트 데이터베이스를 연결하는 프로그램: driver 

----------------------------------------------------------------------------------------------
.jar: 자바의 실행압축파일 형식 -> 알집쓰면 안됨
.war: 자바 웹 프로그램 배포 형식 -> WAS에 배포

스프링부트는 내장WAS를 사용 -> jar로 단독 실행

웹소켓: 실시간으로 주고받는거. 내가ㅣ 서버에 요청한적없는데 서버에세ㅓ 보내주는거 
접속까지 몇초 남았습니다. 실시간 챗봇 이런거 쓸때 사용


